%%writefile omp_exercise.c


/******************************************************************************
* FILE: omp_exercise.c
* DESCRIPTION:  
*   OpenMp Example - Matrix Multiply and sum with reduction - C Version
*   Demonstrates a matrix multiply using OpenMP. Threads share row iterations
*   according to a predefined chunk size.
* AUTHOR: Khodayar Taghiniyarami
* LAST REVISED: 14/06/1400
******************************************************************************/
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NRA 2000                 /* number of rows in matrix A */
#define NCA 2000                 /* number of columns in matrix A */
#define NCB 2000                 /* number of columns in matrix B */

int main () 
{
  int tid, nthreads, i, j, k, chunk;

  double *a,*b;
  double t1,t2,sum;	
  time_t wt1,wt2;

  a=(double *)malloc(NRA*NCA*sizeof(double)); /* matrix A to be multiplied */
  b=(double *)malloc(NCA*NCB*sizeof(double)); /* matrix B to be multiplied */
  sum = 0.0 ;
  /*chunk = round(NRA/omp_get_num_threads);*/ /* set loop iteration chunk size */

  t1=(double)clock()/(double)CLOCKS_PER_SEC;
  time(&wt1);

  /*** Spawn a parallel region explicitly scoping all variables ***/
#pragma omp parallel shared(a,b,nthreads) private(tid,i,j,k)
  {
  tid = omp_get_thread_num();
  if (tid == 0){
    nthreads = omp_get_num_threads();
    printf("Starting matrix multiple example with %d thread(s)\n",nthreads);
    printf("Initializing matrices...\n");
  }
	
  /*** Initialize matrices ***/
#pragma omp for schedule (static) 
  for (i=0; i<NRA; i++)
    for (j=0; j<NCA; j++)
      a[j+NCA*i]= i+j;
#pragma omp for schedule (static)
  for (i=0; i<NCA; i++)
    for (j=0; j<NCB; j++)
      b[j+NCB*i]= i*j;


  /*** Do matrix multiply sharing iterations on outer loop ***/
  /*** Display who does which iterations for demonstration purposes ***/
  printf("Thread %d starting matrix multiply...\n",tid);

  if (tid == 0)	
  	t1=(double)clock()/(double)CLOCKS_PER_SEC;

#pragma omp for reduction(+:sum)
  for (i=0; i<NRA; i++){
    for(j=0; j<NCB; j++)        
        sum += (a[j+NCA*i] * b[j+NCB*i]);
  }
}   /*** End of parallel region ***/

  //if (tid == 0){
 	t2=(double)clock()/(double)CLOCKS_PER_SEC;
	printf("Computation CPUtime %5.2fs\n",t2-t1);
	time(&wt2);
        printf("Computation WallClockTime %2.0fs\n",difftime(wt2,wt1));
//	}	
printf("  sum=%f\n", sum);
}
